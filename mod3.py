# HW1 problem

def extractAllDigits (n):

    """Extract all digits of an integer, without using any division.

    >>> extractAllDigits (1234)
    [1, 2, 3, 4]

    >>> extractAllDigits (42)
    [4, 2]

    Params: n (int) n>0
    Returns: (list of ints) the digits of n
    """
    n = [int(char) for char in str(n)]
    return n



def sumDigits (n):

    """Find the sum of the digits of n, without using any division.

    You should use extractAllDigits.
    Ignore the sign of negative integers.

    >>> sumDigits (1234)
    10
    >>> sumDigits (42)
    6

    Params: n (int) n>0
    Returns: (int) sum of the digits of n
    """
    n = abs(n)
    str_n = str(n)
    n = 0
    for i in str_n:
        n += int(i)
    return n

def simulate3DivRule (n):

    """Sum the digits of n and repeat, until you reduce n to a single +ve digit.

    >>> simulate3DivRule (1234)
    [1234, 10, 1]

    >>> simulate3DivRule (999999)
    [999999, 54, 9]

    >>> simulate3DivRule (999999999999)
    [999999999999, 108, 9]

    >>> simulate3DivRule (123)
    [123, 6]

    >>> simulate3DivRule (8)
    [8]

    Params: n (int) n>0 (you may assume the input is positive)
    Returns: (list of ints): sequence generated by summing all digits, 
                             until the number is a single digit
    """
    while n > 10:
        n = sum(map(int, str(n)))
    return n




def mod3 (n):

    """Use the 3-divisibility rule to discover if n mod 3 = 0, without division.
    
    >>> mod3(111111)
    True
    >>> mod3 (1234)
    False

    Params: n (int) n>0
    Returns: (bool) is n mod 3 = 0?
    """

    while (n > 0):
        n = n - 3
    if n == 0:
        return True
    else:
        return False






